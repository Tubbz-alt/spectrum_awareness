// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoBuffDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protoBuffDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class detectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<detection> {
} _detection_default_instance_;

namespace protobuf_protoBuffDef_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, fftsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, startbin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, freqhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detection, time_),
  0,
  1,
  5,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(detection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_detection_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protoBuffDef.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _detection_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _detection_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022protoBuffDef.proto\"j\n\tdetection\022\r\n\005msg"
      "Id\030\001 \002(\005\022\017\n\007fftSize\030\002 \002(\005\022\020\n\010startBin\030\003 "
      "\001(\005\022\r\n\005power\030\004 \001(\001\022\016\n\006freqHz\030\005 \001(\004\022\014\n\004ti"
      "me\030\006 \001(\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protoBuffDef.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protoBuffDef_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int detection::kMsgIdFieldNumber;
const int detection::kFftSizeFieldNumber;
const int detection::kStartBinFieldNumber;
const int detection::kPowerFieldNumber;
const int detection::kFreqHzFieldNumber;
const int detection::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

detection::detection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protoBuffDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:detection)
}
detection::detection(const detection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&startbin_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(startbin_));
  // @@protoc_insertion_point(copy_constructor:detection)
}

void detection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msgid_, 0, reinterpret_cast<char*>(&startbin_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(startbin_));
}

detection::~detection() {
  // @@protoc_insertion_point(destructor:detection)
  SharedDtor();
}

void detection::SharedDtor() {
}

void detection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detection::descriptor() {
  protobuf_protoBuffDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protoBuffDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const detection& detection::default_instance() {
  protobuf_protoBuffDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

detection* detection::New(::google::protobuf::Arena* arena) const {
  detection* n = new detection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void detection::Clear() {
// @@protoc_insertion_point(message_clear_start:detection)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&startbin_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(startbin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool detection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:detection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fftSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fftsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fftsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 startBin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startbin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startbin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double power = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 freqHz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_freqhz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freqhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:detection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:detection)
  return false;
#undef DO_
}

void detection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:detection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 msgId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // required int32 fftSize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fftsize(), output);
  }

  // optional int32 startBin = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startbin(), output);
  }

  // optional double power = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->power(), output);
  }

  // optional uint64 freqHz = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->freqhz(), output);
  }

  // optional uint64 time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:detection)
}

::google::protobuf::uint8* detection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:detection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 msgId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // required int32 fftSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fftsize(), target);
  }

  // optional int32 startBin = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startbin(), target);
  }

  // optional double power = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->power(), target);
  }

  // optional uint64 freqHz = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->freqhz(), target);
  }

  // optional uint64 time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:detection)
  return target;
}

size_t detection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:detection)
  size_t total_size = 0;

  if (has_msgid()) {
    // required int32 msgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  if (has_fftsize()) {
    // required int32 fftSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fftsize());
  }

  return total_size;
}
size_t detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:detection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 msgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());

    // required int32 fftSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fftsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional double power = 4;
    if (has_power()) {
      total_size += 1 + 8;
    }

    // optional uint64 freqHz = 5;
    if (has_freqhz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freqhz());
    }

    // optional uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 startBin = 3;
    if (has_startbin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startbin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:detection)
  GOOGLE_DCHECK_NE(&from, this);
  const detection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const detection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:detection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:detection)
    MergeFrom(*source);
  }
}

void detection::MergeFrom(const detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:detection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fftsize_ = from.fftsize_;
    }
    if (cached_has_bits & 0x00000004u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000008u) {
      freqhz_ = from.freqhz_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      startbin_ = from.startbin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void detection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detection::CopyFrom(const detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void detection::Swap(detection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void detection::InternalSwap(detection* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(fftsize_, other->fftsize_);
  std::swap(power_, other->power_);
  std::swap(freqhz_, other->freqhz_);
  std::swap(time_, other->time_);
  std::swap(startbin_, other->startbin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata detection::GetMetadata() const {
  protobuf_protoBuffDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protoBuffDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// detection

// required int32 msgId = 1;
bool detection::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void detection::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void detection::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void detection::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
::google::protobuf::int32 detection::msgid() const {
  // @@protoc_insertion_point(field_get:detection.msgId)
  return msgid_;
}
void detection::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:detection.msgId)
}

// required int32 fftSize = 2;
bool detection::has_fftsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void detection::set_has_fftsize() {
  _has_bits_[0] |= 0x00000002u;
}
void detection::clear_has_fftsize() {
  _has_bits_[0] &= ~0x00000002u;
}
void detection::clear_fftsize() {
  fftsize_ = 0;
  clear_has_fftsize();
}
::google::protobuf::int32 detection::fftsize() const {
  // @@protoc_insertion_point(field_get:detection.fftSize)
  return fftsize_;
}
void detection::set_fftsize(::google::protobuf::int32 value) {
  set_has_fftsize();
  fftsize_ = value;
  // @@protoc_insertion_point(field_set:detection.fftSize)
}

// optional int32 startBin = 3;
bool detection::has_startbin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void detection::set_has_startbin() {
  _has_bits_[0] |= 0x00000020u;
}
void detection::clear_has_startbin() {
  _has_bits_[0] &= ~0x00000020u;
}
void detection::clear_startbin() {
  startbin_ = 0;
  clear_has_startbin();
}
::google::protobuf::int32 detection::startbin() const {
  // @@protoc_insertion_point(field_get:detection.startBin)
  return startbin_;
}
void detection::set_startbin(::google::protobuf::int32 value) {
  set_has_startbin();
  startbin_ = value;
  // @@protoc_insertion_point(field_set:detection.startBin)
}

// optional double power = 4;
bool detection::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void detection::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
void detection::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
void detection::clear_power() {
  power_ = 0;
  clear_has_power();
}
double detection::power() const {
  // @@protoc_insertion_point(field_get:detection.power)
  return power_;
}
void detection::set_power(double value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:detection.power)
}

// optional uint64 freqHz = 5;
bool detection::has_freqhz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void detection::set_has_freqhz() {
  _has_bits_[0] |= 0x00000008u;
}
void detection::clear_has_freqhz() {
  _has_bits_[0] &= ~0x00000008u;
}
void detection::clear_freqhz() {
  freqhz_ = GOOGLE_ULONGLONG(0);
  clear_has_freqhz();
}
::google::protobuf::uint64 detection::freqhz() const {
  // @@protoc_insertion_point(field_get:detection.freqHz)
  return freqhz_;
}
void detection::set_freqhz(::google::protobuf::uint64 value) {
  set_has_freqhz();
  freqhz_ = value;
  // @@protoc_insertion_point(field_set:detection.freqHz)
}

// optional uint64 time = 6;
bool detection::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void detection::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void detection::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void detection::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 detection::time() const {
  // @@protoc_insertion_point(field_get:detection.time)
  return time_;
}
void detection::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:detection.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
